// Generated by Xata Codegen 0.30.1. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "ActivitySummaryTable",
    checkConstraints: {
      ActivitySummaryTable_xata_id_length_xata_id: {
        name: "ActivitySummaryTable_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {
      user_id_link: {
        name: "user_id_link",
        columns: ["user_id"],
        referencedTable: "UsersTable",
        referencedColumns: ["xata_id"],
        onDelete: "SET NULL",
      },
    },
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_ActivitySummaryTable_xata_id_key: {
        name: "_pgroll_new_ActivitySummaryTable_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "projects_completed",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "tasks_completed",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "updated_at",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "user_id",
        type: "link",
        link: { table: "UsersTable" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"UsersTable"}',
      },
      {
        name: "working_hours",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "RemindersTable",
    checkConstraints: {
      RemindersTable_xata_id_length_xata_id: {
        name: "RemindersTable_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {
      task_id_link: {
        name: "task_id_link",
        columns: ["task_id"],
        referencedTable: "TasksTable",
        referencedColumns: ["xata_id"],
        onDelete: "CASCADE",
      },
      user_id_link: {
        name: "user_id_link",
        columns: ["user_id"],
        referencedTable: "UsersTable",
        referencedColumns: ["xata_id"],
        onDelete: "RESTRICT",
      },
    },
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_RemindersTable_xata_id_key: {
        name: "_pgroll_new_RemindersTable_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "created_at",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "reminder_time",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "task_id",
        type: "link",
        link: { table: "TasksTable" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"TasksTable"}',
      },
      {
        name: "updated_at",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "user_id",
        type: "link",
        link: { table: "UsersTable" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"UsersTable"}',
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "TasksTable",
    checkConstraints: {
      TasksTable_xata_id_length_xata_id: {
        name: "TasksTable_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {
      assigned_to_link: {
        name: "assigned_to_link",
        columns: ["assigned_to"],
        referencedTable: "UsersTable",
        referencedColumns: ["xata_id"],
        onDelete: "CASCADE",
      },
      created_by_link: {
        name: "created_by_link",
        columns: ["created_by"],
        referencedTable: "UsersTable",
        referencedColumns: ["xata_id"],
        onDelete: "CASCADE",
      },
    },
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_TasksTable_xata_id_key: {
        name: "_pgroll_new_TasksTable_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "assigned_to",
        type: "link",
        link: { table: "UsersTable" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"UsersTable"}',
      },
      {
        name: "created_at",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "created_by",
        type: "link",
        link: { table: "UsersTable" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"UsersTable"}',
      },
      {
        name: "description",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "due_date",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "emoji_support",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "status",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "title",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "updated_at",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "TimeLogTable",
    checkConstraints: {
      TimeLogTable_xata_id_length_xata_id: {
        name: "TimeLogTable_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {
      task_id_link: {
        name: "task_id_link",
        columns: ["task_id"],
        referencedTable: "TasksTable",
        referencedColumns: ["xata_id"],
        onDelete: "SET NULL",
      },
      user_id_link: {
        name: "user_id_link",
        columns: ["user_id"],
        referencedTable: "UsersTable",
        referencedColumns: ["xata_id"],
        onDelete: "SET NULL",
      },
    },
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_TimeLogTable_xata_id_key: {
        name: "_pgroll_new_TimeLogTable_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "created_at",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "task_id",
        type: "link",
        link: { table: "TasksTable" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"TasksTable"}',
      },
      {
        name: "time_spent",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "updated_at",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "user_id",
        type: "link",
        link: { table: "UsersTable" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"UsersTable"}',
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "UsersTable",
    checkConstraints: {
      UsersTable_xata_id_length_xata_id: {
        name: "UsersTable_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      UsersTable__pgroll_new_email_key: {
        name: "UsersTable__pgroll_new_email_key",
        columns: ["email"],
      },
      _pgroll_new_UsersTable_xata_id_key: {
        name: "_pgroll_new_UsersTable_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "created_at",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "email",
        type: "text",
        notNull: false,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "name",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "password_hash",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "updated_at",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type ActivitySummaryTable = InferredTypes["ActivitySummaryTable"];
export type ActivitySummaryTableRecord = ActivitySummaryTable & XataRecord;

export type RemindersTable = InferredTypes["RemindersTable"];
export type RemindersTableRecord = RemindersTable & XataRecord;

export type TasksTable = InferredTypes["TasksTable"];
export type TasksTableRecord = TasksTable & XataRecord;

export type TimeLogTable = InferredTypes["TimeLogTable"];
export type TimeLogTableRecord = TimeLogTable & XataRecord;

export type UsersTable = InferredTypes["UsersTable"];
export type UsersTableRecord = UsersTable & XataRecord;

export type DatabaseSchema = {
  ActivitySummaryTable: ActivitySummaryTableRecord;
  RemindersTable: RemindersTableRecord;
  TasksTable: TasksTableRecord;
  TimeLogTable: TimeLogTableRecord;
  UsersTable: UsersTableRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://vincent-kamami-s-workspace-7hal8u.us-east-1.xata.sh/db/TaskManagementWebApp",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
